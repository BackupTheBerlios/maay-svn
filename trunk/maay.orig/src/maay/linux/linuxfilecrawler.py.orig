#
# TODO: check right access to directory...
#

import os
import os.path
import stat

PUBLISHED_INDEXATION = 0
PRIVATE_INDEXATION = 1
CACHED_INDEXATION = 2

#class MountedFileSystemTable:
#    def __init__(self):
#        self.__partitions = {}
#        self.__notIndexedDirectories = []
#
#        fd = file('/etc/mtab')
#        while True:
#            line = fd.readline()
#            if not line:
#                break
#            words = line.split()
#            fs = words[2]
#            mount_point = words[1]
#
#            partitions = self.__partitions.get(fs)
#            if partitions:
#                self.__partitions[fs] = [mount_point]
#            else:
#                partition.append(mount_point)
#        fd.close()
#        
#    def getEXTFileSystems(fs)
#        return self.__partitions.get(fs)
#    
#    def getFileSystems(fs)
#        return self.__partitions.get(fs)

def getDefaultIndexableRootDirectories():
    """
    indexable directories of last resort
    """
    homedir = os.environ.get('HOME')
    if homedir:
        return [ homedir ]
    return []

def isIncluding(directory, directories):
    for d in directories:
        if d.upper().find(directory.upper()) == 0:
            return True
    return False

def isIncluded(directory, directories):
    for d in directories:
        if directory.upper().find(d.upper()) == 0:
            return True
    return False


class FileCrawler:
    def __init__(self, indexedDirectories, notIndexedDirectories, publishedDirectories, notPublishedDirectories, temporaryDirectories, cachedDirectories, indexationType, isIndexableFunction):
        self.__indexationType = indexationType
        self.__indexedDirectories = indexedDirectories
        self.__notIndexedDirectories = notIndexedDirectories
        self.__publishedDirectories = publishedDirectories
        self.__notPublishedDirectories = notPublishedDirectories
        self.__isIndexableFunction = isIndexableFunction

        self.__temporaryDirectories = temporaryDirectories
        self.__cachedDirectories = cachedDirectories

        self.__files = None
        self.__path = None

        self.reset()

    def setIndexedDirectories(self, indexedDirectories):
        self.__indexedDirectories = indexedDirectories

    def setNotIndexedDirectories(self, notIndexedDirectories):
        self.__notIndexedDirectories = notIndexedDirectories

    def setPublishedDirectories(self, publishedDirectories):
        self.__publishedDirectories = publishedDirectories

    def setNotPublishedDirectories(self, notPublishedDirectories):
        self.__notPublishedDirectories = notPublishedDirectories



    def reset(self, indexedDirectories=None, notIndexedDirectories=None, publishedDirectories=None, notPublishedDirectories=None, temporaryDirectories=None, cachedDirectories=None):
        if indexedDirectories:
            self.__indexedDirectories = indexedDirectories
        
        if notIndexedDirectories:
            self.__notIndexedDirectories = notIndexedDirectories
        
        if publishedDirectories:
            self.__publishedDirectories = publishedDirectories
            
        if notPublishedDirectories:
            self.__notPublishedDirectories = notPublishedDirectories

        if self.__indexationType == PUBLISHED_INDEXATION:
            self.__files = [ self.__publishedDirectories ]
        else:
            self.__files = [ self.__indexedDirectories ]

        self.__path = [ 0 ]

    def getNextFilename(self):
        while 1:
            depth = len(self.__path)
            if depth == 0:
                return None

            index = self.__path[depth - 1]
            
            if index >= len(self.__files[depth - 1]):
                # backtrack
                del self.__path[depth - 1]
                del self.__files[depth - 1]
                depth -= 1
                if depth > 0:
                    self.__path[depth - 1] += 1

                continue

            filename = self.__files[depth - 1][index]

            current_filename = ""
            for i in xrange(depth):
                current_filename = os.path.join(current_filename, self.__files[i][self.__path[i]])

            mode = os.lstat(current_filename)[stat.ST_MODE]

            if stat.S_ISDIR(mode):
                files = []
                try:
                    filenames = os.listdir(current_filename)
                except:
                    filenames = []
                    
                                
                                # sort filenames case-insensitively
                                #filenames.sort(lambda a, b: cmp(a.upper(), b.upper())
                for fn in filenames:
                    absolute_fn = os.path.join(current_filename, fn)

                    mode_fn = os.lstat(absolute_fn)[stat.ST_MODE]
                    if not stat.S_ISDIR(mode_fn) and not self.__isIndexableFunction(absolute_fn):
                        continue
                    if not isIncluded(absolute_fn, self.__indexedDirectories):
                        continue                            

                    if isIncluded(absolute_fn, self.__notIndexedDirectories):
                        continue                            

                    if isIncluded(absolute_fn, self.__cachedDirectories):
                        continue                            

                    if isIncluded(absolute_fn, self.__temporaryDirectories):
                        continue                            

                    if self.__indexationType == PRIVATE_INDEXATION and isIncluded(absolute_fn, self.__publishedDirectories) and isIncluding(absolute_fn, self.__notPublishedDirectories):
                        continue                            

                    if self.__indexationType == PUBLISHED_INDEXATION:
                        if not isIncluded(absolute_fn, self.__publishedDirectories):
                            continue
                        if isIncluded(absolute_fn, self.__notPublishedDirectories):
                            continue

                    # check if it is a hidden file
                    if fn[0] == '.':
                        continue

                    files.append(fn)

                self.__files.append(files)    
                self.__path.append(0)
            elif stat.S_ISREG(mode):
                self.__path[depth-1] += 1
                return current_filename
            
        
